{"version":3,"file":"functional.5f294f24.js","sources":["../../src/utils/controls.tsx","../../src/utils/functional.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { SetRequired } from 'type-fest';\n\nexport interface ControlProps<T = any> {\n  /**\n   * The value being controlled by the component.\n   */\n  value: T;\n\n  /**\n   * A callback that will be called with new values when the control is updated.\n   */\n  onValueChange: (value: T) => void;\n}\n\nexport type ControlValue<Props> = Props extends ControlProps<infer R> ? R : never;\n\nexport type ControlledProps<Props extends ControlProps<any>> = Omit<Props, keyof ControlProps> & {\n  initialValue?: ControlValue<Props>;\n};\n\nexport interface ControlledOptions<Props extends ControlProps> {\n  defaultValue?: ControlValue<Props>;\n  enrichProps?: <T extends Omit<Props, keyof ControlProps>>(props: T, state: [ControlValue<Props>, (value: ControlValue<Props>) => void]) => T;\n}\n\nexport const createControlled: {\n  <Props extends ControlProps>(Component: React.FC<Props>, options: SetRequired<ControlledOptions<Props>, 'defaultValue'>): React.FC<\n    ControlledProps<Props>\n  >;\n  <Props extends ControlProps>(Component: React.FC<Props>, options?: ControlledOptions<Props>): React.FC<\n    SetRequired<ControlledProps<Props>, 'initialValue'>\n  >;\n} =\n  (Component: React.FC<ControlProps<any>>, options?: ControlledOptions<ControlProps<any>>) =>\n  ({ initialValue, ...props }: ControlledProps<ControlProps<any>>) => {\n    const stateAPI = useState<ControlProps<any>>((initialValue ?? options?.defaultValue)!);\n    const enrichedProps = options?.enrichProps?.(props, stateAPI) ?? props;\n\n    const [value, setValue] = stateAPI;\n\n    return <Component {...enrichedProps} value={value} onValueChange={setValue} />;\n  };\n","export const chain =\n  <Args extends any[]>(...fns: Array<((...args: Args) => void) | undefined>) =>\n  (...args: Args) =>\n    fns.forEach((fn) => fn?.(...args));\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {};\n"],"names":["createControlled","Component","options","initialValue","props","stateAPI","useState","defaultValue","enrichedProps","enrichProps","value","setValue","chain","fns","args","fn","noop"],"mappings":"qDA0BO,MAAMA,EAQX,CAACC,EAAwCC,IACzC,CAAC,CAAEC,aAAAA,KAAiBC,CAAnB,IAAmE,SAClE,MAAMC,EAAWC,EAAAA,QAAAA,SAA6BH,GAAAA,KAAAA,EAAgBD,GAAAA,YAAAA,EAASK,YAA9C,EACnBC,GAAgBN,GAAAA,EAAAA,GAAAA,YAAAA,EAASO,cAATP,YAAAA,EAAAA,KAAAA,EAAuBE,EAAOC,KAA9BH,KAAAA,EAA2CE,EAE3D,CAACM,EAAOC,CAAR,EAAoBN,EAE1B,SAAQJ,EAAD,CAAA,GAAeO,EAAe,MAAAE,EAAc,cAAeC,CAAAA,CAAlE,CACD,EC1CUC,EACX,IAAwBC,IACxB,IAAIC,IACFD,EAAI,QAASE,GAAOA,GAAA,YAAAA,EAAK,GAAGD,EAAK,EAGxBE,EAAO,IAAM,CAAC"}