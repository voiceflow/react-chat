{"version":3,"file":"index.e9c15f57.js","sources":["../../src/utils/controls.tsx","../../src/utils/functional.ts","../../src/components/Input/styled.ts","../../src/components/Input/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { SetRequired } from 'type-fest';\n\nexport interface ControlProps<T = any> {\n  /**\n   * The value being controlled by the component.\n   */\n  value: T;\n\n  /**\n   * A callback that will be called with new values when the control is updated.\n   */\n  onValueChange: (value: T) => void;\n}\n\nexport type ControlValue<Props> = Props extends ControlProps<infer R> ? R : never;\n\nexport type ControlledProps<Props extends ControlProps<any>> = Omit<Props, keyof ControlProps> & {\n  initialValue?: ControlValue<Props>;\n};\n\nexport interface ControlledOptions<Props extends ControlProps> {\n  defaultValue?: ControlValue<Props>;\n  enrichProps?: <T extends Omit<Props, keyof ControlProps>>(props: T, state: [ControlValue<Props>, (value: ControlValue<Props>) => void]) => T;\n}\n\nexport const createControlled: {\n  <Props extends ControlProps>(Component: React.FC<Props>, options: SetRequired<ControlledOptions<Props>, 'defaultValue'>): React.FC<\n    ControlledProps<Props>\n  >;\n  <Props extends ControlProps>(Component: React.FC<Props>, options?: ControlledOptions<Props>): React.FC<\n    SetRequired<ControlledProps<Props>, 'initialValue'>\n  >;\n} =\n  (Component: React.FC<ControlProps<any>>, options?: ControlledOptions<ControlProps<any>>) =>\n  ({ initialValue, ...props }: ControlledProps<ControlProps<any>>) => {\n    const stateAPI = useState<ControlProps<any>>((initialValue ?? options?.defaultValue)!);\n    const enrichedProps = options?.enrichProps?.(props, stateAPI) ?? props;\n    const [value, setValue] = stateAPI;\n\n    return <Component {...enrichedProps} value={value} onValueChange={setValue} />;\n  };\n","export const chain =\n  <Args extends any[]>(...fns: Array<((...args: Args) => void) | undefined>) =>\n  (...args: Args) =>\n    fns.forEach((fn) => fn?.(...args));\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {};\n","import { ClassName } from '@/constants';\nimport { tagFactory } from '@/hocs';\nimport { CSS, styled } from '@/styles';\n\nconst tag = tagFactory(ClassName.INPUT);\n\nexport const inputStyles: CSS = {\n  height: '$md',\n  boxSizing: 'border-box',\n  border: '1px solid rgba(115,115,118,0.3)',\n  borderRadius: '$1',\n  backgroundColor: '$white',\n  boxShadow: '0 1px 12px $shadow2',\n  trans: ['border-color'],\n};\n\nexport const inputFocusStyles: CSS = {\n  border: '1px solid rgba(115,115,118,0.5)',\n};\n\nexport const Container = styled(tag('input'), {\n  ...inputStyles,\n  padding: '0 $4',\n  typo: {},\n  color: '$black',\n\n  '&:focus': {\n    ...inputFocusStyles,\n    outline: 0,\n  },\n\n  '&::placeholder': {\n    color: '$darkGrey',\n  },\n});\n","import { Merge } from 'type-fest';\n\nimport { ControlProps, createControlled } from '@/utils/controls';\nimport { chain } from '@/utils/functional';\n\nimport { Container } from './styled';\n\nexport interface InputProps extends Merge<React.ComponentProps<typeof Container>, ControlProps<string>> {}\n\nconst Input: React.FC<InputProps> = ({ onValueChange, onChange, ...props }) => {\n  const handleChange = chain(onChange, (event) => onValueChange(event.target.value));\n\n  return <Container {...props} onChange={handleChange} />;\n};\n\n/**\n * A text input form control.\n *\n * @see {@link https://voiceflow.github.io/react-chat/?path=/story/core-input--default}\n */\nexport default Object.assign(Input, {\n  Controlled: createControlled(Input, { defaultValue: '' }),\n  Container,\n});\n"],"names":["createControlled","Component","options","initialValue","props","stateAPI","useState","defaultValue","enrichedProps","enrichProps","value","setValue","chain","fns","args","fn","noop","tag","tagFactory","ClassName","inputStyles","inputFocusStyles","Container","styled","Input","onValueChange","onChange","handleChange","event","_jsx","Input$1"],"mappings":"2GA0BO,MAAMA,EAQX,CAACC,EAAwCC,IACzC,CAAC,CAAEC,aAAAA,KAAiBC,CAAnB,IAAmE,SAClE,MAAMC,EAAWC,EAAAA,QAAAA,SAA6BH,GAAAA,KAAAA,EAAgBD,GAAAA,YAAAA,EAASK,YAA9C,EACnBC,GAAgBN,GAAAA,EAAAA,GAAAA,YAAAA,EAASO,cAATP,YAAAA,EAAAA,KAAAA,EAAuBE,EAAOC,KAA9BH,KAAAA,EAA2CE,EAC3D,CAACM,EAAOC,CAAR,EAAoBN,EAE1B,SAAQJ,EAAD,CAAA,GAAeO,EAAe,MAAAE,EAAc,cAAeC,CAAAA,CAAlE,CACD,ECzCUC,EACX,IAAwBC,IACxB,IAAIC,IACFD,EAAI,QAASE,GAAOA,GAAA,YAAAA,EAAK,GAAGD,EAAK,EAGxBE,EAAO,IAAM,CAAC,ECFrBC,EAAMC,EAAWC,EAAU,KAAK,EAEzBC,EAAmB,CAC9B,OAAQ,MACR,UAAW,aACX,OAAQ,kCACR,aAAc,KACd,gBAAiB,SACjB,UAAW,sBACX,MAAO,CAAC,cAAc,CACxB,EAEaC,EAAwB,CACnC,OAAQ,iCACV,EAEaC,EAAYC,EAAON,EAAI,OAAO,EAAG,CAC5C,GAAGG,EACH,QAAS,OACT,KAAM,CAAC,EACP,MAAO,SAEP,UAAW,CACT,GAAGC,EACH,QAAS,CACX,EAEA,iBAAkB,CAChB,MAAO,WACT,CACF,CAAC,ECzBDG,EAAA,CAAA,CAAqC,cAAAC,EAAEA,SAAAA,KAAeC,CAAjB,IAAA,CACnC,MAAAC,EAAAf,EAAAc,EAAAE,GAAAH,EAAAG,EAAA,OAAA,KAAA,CAAA,EAEA,OAAAC,EAAAP,EAAA,CAAO,GAAAlB,EAAeA,SAAAA,CAAiBuB,CAAAA,CACxC,EAODG,EAAA,OAAA,OAAAN,EAAA,CAAoC,WAAAxB,EAAAwB,EAAA,CACE,aAAA,EAAgB,CAAA,EAAxB,UAAAF,CADM,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}