{"version":3,"file":"index.265919e8.js","sources":["../../src/components/Card/styled.ts","../../src/components/Card/utils.ts","../../src/components/Card/index.tsx"],"sourcesContent":["import Button from '@/components/Button';\nimport Image from '@/components/Image';\nimport { ClassName } from '@/constants';\nimport { tagFactory } from '@/hocs';\nimport { styled } from '@/styles';\n\nexport const CARD_WIDTH = 246;\n\nconst tag = tagFactory(ClassName.CARD);\n\nexport const Container = styled(tag('section'), {\n  display: 'inline-flex',\n  flexDirection: 'column',\n  width: CARD_WIDTH,\n  border: '1px solid #f1f1f1',\n  borderRadius: '$2',\n  boxSizing: 'content-box',\n  overflow: 'hidden',\n  backgroundColor: '$lightGrey',\n\n  [`& ${Image.Background.Base}`]: {\n    height: 150,\n  },\n\n  [`& ${Button.Container}`]: {\n    width: '100%',\n    color: '$primary',\n    backgroundColor: '$white',\n    boxShadow: '0 5px 8px -8px $shadow12, 0 2px 4px -3px $shadow12, 0 0 0 1px $shadow3, 0 1px 3px 1px $shadow1',\n    marginBottom: '$2',\n    trans: ['color', 'box-shadow'],\n\n    '&:hover': {\n      color: '$darkPrimary',\n      backgroundColor: '$white',\n      boxShadow: '0 5px 8px -8px $shadow12, 0 2px 4px -3px $shadow12, 0 0 0 1px $shadow4, 0 1px 4px 1px $shadow4',\n    },\n\n    '&:first-of-type': {\n      marginTop: '$3',\n    },\n\n    '&:last-of-type': {\n      marginBottom: 0,\n    },\n  },\n});\n\nexport const Content = styled(tag('main', 'content'), {\n  padding: '$3',\n});\n\nexport const Header = styled(tag('h3', 'header'), {\n  margin: '0 0 $1 0',\n  typo: { weight: '$2' },\n  color: '$black',\n  wordBreak: 'break-all',\n});\n\nexport const Description = styled(tag('p', 'description'), {\n  margin: 0,\n  typo: { size: '$1' },\n  color: '$darkGrey',\n  whiteSpace: 'normal',\n  wordBreak: 'break-all',\n});\n\nexport const Link = styled(tag('a', 'link'), {\n  margin: 0,\n  typo: { size: '$1' },\n  whiteSpace: 'normal',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  color: 'rgb(93, 157, 245)',\n  textDecoration: 'underline',\n  pointerEvents: 'all',\n  wordBreak: 'break-all',\n});\n","export const isValidHttpUrl = (value: string) => {\n  let url;\n\n  try {\n    url = new URL(value);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n","import { useContext, useMemo } from 'react';\n\nimport Button from '@/components/Button';\nimport Image from '@/components/Image';\nimport { RuntimeStateAPIContext } from '@/contexts';\n\nimport { Container, Content, Description, Header, Link } from './styled';\nimport { CardProps } from './types';\nimport { isValidHttpUrl } from './utils';\n\nconst Card: React.FC<CardProps> = ({ title, description, image, actions = [] }) => {\n  const runtime = useContext(RuntimeStateAPIContext);\n  const isLink = isValidHttpUrl(description);\n\n  const buttons = useMemo(() => actions.filter(({ name }) => !!name), [actions]);\n\n  return (\n    <Container>\n      {!!image && <Image.Default image={image} />}\n      <Content>\n        {!!title && <Header>{title}</Header>}\n        {!!description &&\n          (isLink ? (\n            <Link rel=\"noopener noreferrer\" href={description} target=\"_blank\">\n              {description}\n            </Link>\n          ) : (\n            <Description>{description}</Description>\n          ))}\n        {buttons.map(({ request, name }, index) => (\n          <Button onClick={() => runtime.interact(request, name)} key={index}>\n            {name}\n          </Button>\n        ))}\n      </Content>\n    </Container>\n  );\n};\n\n/**\n * A titled card with content and optional controls.\n *\n * @see {@link https://voiceflow.github.io/react-chat/?path=/story/components-card--simple}\n */\nexport default Object.assign(Card, {\n  Container,\n});\n"],"names":["CARD_WIDTH","tag","tagFactory","ClassName","Container","styled","Image","Button","Content","Header","Description","Link","isValidHttpUrl","value","url","Card","title","description","image","runtime","useContext","RuntimeStateAPIContext","isLink","buttons","useMemo","actions","name","_jsxs","_jsx","request","Card$1"],"mappings":"8OAMO,MAAMA,EAAa,IAEpBC,EAAMC,EAAWC,EAAU,IAAI,EAExBC,EAAYC,EAAOJ,EAAI,SAAS,EAAG,CAC9C,QAAS,cACT,cAAe,SACf,MAAOD,EACP,OAAQ,oBACR,aAAc,KACd,UAAW,cACX,SAAU,SACV,gBAAiB,aAEjB,CAAC,KAAKM,EAAM,WAAW,QAAS,CAC9B,OAAQ,GACV,EAEA,CAAC,KAAKC,EAAO,aAAc,CACzB,MAAO,OACP,MAAO,WACP,gBAAiB,SACjB,UAAW,iGACX,aAAc,KACd,MAAO,CAAC,QAAS,YAAY,EAE7B,UAAW,CACT,MAAO,eACP,gBAAiB,SACjB,UAAW,gGACb,EAEA,kBAAmB,CACjB,UAAW,IACb,EAEA,iBAAkB,CAChB,aAAc,CAChB,CACF,CACF,CAAC,EAEYC,EAAUH,EAAOJ,EAAI,OAAQ,SAAS,EAAG,CACpD,QAAS,IACX,CAAC,EAEYQ,EAASJ,EAAOJ,EAAI,KAAM,QAAQ,EAAG,CAChD,OAAQ,WACR,KAAM,CAAE,OAAQ,IAAK,EACrB,MAAO,SACP,UAAW,WACb,CAAC,EAEYS,EAAcL,EAAOJ,EAAI,IAAK,aAAa,EAAG,CACzD,OAAQ,EACR,KAAM,CAAE,KAAM,IAAK,EACnB,MAAO,YACP,WAAY,SACZ,UAAW,WACb,CAAC,EAEYU,EAAON,EAAOJ,EAAI,IAAK,MAAM,EAAG,CAC3C,OAAQ,EACR,KAAM,CAAE,KAAM,IAAK,EACnB,WAAY,SACZ,SAAU,SACV,aAAc,WACd,MAAO,oBACP,eAAgB,YAChB,cAAe,MACf,UAAW,WACb,CAAC,EC7EYW,EAAkBC,GAAkB,CAC3C,IAAAC,EAEA,GAAA,CACIA,EAAA,IAAI,IAAID,CAAK,QAEZ,MAAA,EACT,CACA,OAAOC,EAAI,WAAa,SAAWA,EAAI,WAAa,QACtD,ECCAC,EAAA,CAAA,CAAmC,MAAAC,EAAEA,YAAAA,EAAOC,MAAAA,EAAaC,QAAAA,EAAAA,CAAAA,CAAtB,IAAA,CACjC,MAAAC,EAAAC,qBAAAC,CAAA,EACAC,EAAAV,EAAAK,CAAA,EAEAM,EAAAC,EAAA,QAAA,QAAA,IAAAC,EAAA,OAAA,CAAA,CAA8C,KAAAC,CAAEA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAEhD,OAAAC,EAAAvB,EAAA,CACE,SAAA,CAAA,CAAA,CAAAc,GAAAU,EAAAtB,EAAA,QAAA,CACc,MAAAY,CAAe,CAAA,EAAAS,EAAAnB,EAAA,CAC3B,SAAA,CAAA,CAAA,CAAAQ,GAAAY,EAAAnB,EAAA,CACc,SAAAO,CAASA,CAAAA,EAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAGjB,IAAA,sBAAU,KAAAC,EAA4BA,OAAAA,SAAoB,SAAAA,CACvDA,CAAAA,EAAAA,EAAAA,EAAAA,CAGH,SAAAA,CAAcA,CAAAA,GAAAA,EAAAA,IAAAA,CAAAA,CAEJ,QAAAY,EAAEA,KAAAA,CAASH,EAAAA,IAAAA,EAAAA,EAAAA,CACvB,QAAA,IAAAP,EAAA,SAAAU,EAAAH,CAAA,EAAuB,SAAAA,CACpBA,EAAAA,CAAAA,CAAAA,CAAAA,CAZP,CAAA,CAAA,CAFF,CAAA,CAoBH,EAODI,EAAA,OAAA,OAAAf,EAAA,CAAmC,UAAAX,CAAA,CAAA;"}